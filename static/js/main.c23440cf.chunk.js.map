{"version":3,"sources":["components/container/index.tsx","components/container/container.tsx","components/header/index.tsx","components/header/header.tsx","components/picture-item/index.tsx","components/picture-item/picture-item.tsx","components/picture-list/index.tsx","components/picture-list/picture-list.tsx","components/picture-switch/index.tsx","components/picture-switch/picture-switch.tsx","components/message-item/index.tsx","components/message-item/message-item.tsx","components/message-list/index.tsx","components/message-list/message-list.tsx","utils/index.tsx","components/app/app.tsx","service/giphy-service.ts","components/app/index.tsx","index.tsx"],"names":["Container","children","className","classes","classNames","Header","PictureItem","pictures","onPictureHandler","map","tag","url","alt","width","height","id","onClick","src","PictureList","currentPictures","picture","pictureProps","PictureSwitch","isGroup","length","Array","from","Set","tagPictures","filter","MessageItem","status","message","onMessageDelete","useEffect","handler","setTimeout","clearTimeout","role","type","MessageList","messages","tags","guphyService","_apiBase","_apiKey","getResource","a","fetch","res","ok","error","Error","json","getRandomPicture","App","useState","setPictures","search","setSearch","setIsGroup","isLoading","setLoading","setMessages","createMessage","Date","getUTCMilliseconds","prev","sendRequest","useCallback","request","tagArray","split","el","trim","requests","str","pictureItem","Promise","all","then","result","forEach","index","data","image_url","image_width","image_height","title","push","catch","interval","setInterval","Math","floor","random","getRandomTag","clearInterval","onChange","event","target","value","replace","name","placeholder","disabled","idx","findIndex","slice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c23440cf.chunk.js","sourcesContent":["import Container from \"./container\";\r\n\r\nexport default Container;","import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\ntype Props = {\r\n  className?: string;\r\n}\r\n\r\nconst Container:React.FC<Props> = ({children, className}) => {\r\n\r\n  const classes:string = classNames(\"container\", className);\r\n\r\n  return (\r\n    <div className={classes}> \r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Container;","import Header from \"./header\";\r\n\r\nexport default Header;","import './header.scss';\r\nimport Container from '../container';\r\n\r\nconst Header:React.FC = ({children}) => {\r\n  return (\r\n    <header className=\"p-3 bg-dark text-white\">\r\n      <Container>\r\n        <div className=\"d-flex flex-wrap align-items-center justify-content-center justify-content-lg-start\">\r\n          {children}\r\n        </div>\r\n      </Container>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;","import PictureItem from \"./picture-item\";\r\n\r\nexport default PictureItem;","import React from \"react\";\r\nimport './picture-item.scss';\r\n\r\ntype Props = {\r\n  pictures: IPicture[];\r\n  onPictureHandler: (tag: string) => void;\r\n}\r\n\r\nconst PictureItem:React.FC<Props> = ({pictures, onPictureHandler}) => {\r\n  const renderedPictures = () => {\r\n    return pictures.map(({tag, url, alt, width, height, id}) => {\r\n      return (\r\n        <img key={id} onClick={()=> onPictureHandler(tag)} src={url} alt={alt} width={width} height={height}/>\r\n      )\r\n    })\r\n  }\r\n  return(\r\n    <div className=\"col-sm-3 mb-3\">\r\n      <div className=\"picture-item\">\r\n        {renderedPictures()}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PictureItem;","import PictureList from \"./picture-list\";\r\n\r\nexport default PictureList;","import React from \"react\";\r\nimport PictureItem from \"../picture-item\";\r\n\r\ntype Props = {\r\n  pictures: IItem[];\r\n  onPictureHandler: (tag: string) => void;\r\n}\r\n\r\nconst PictureList:React.FC<Props>  = ({pictures, onPictureHandler}) => {\r\n  \r\n  const renderedPictures = (currentPictures:IItem[]) => {\r\n    return currentPictures.map((picture:IItem) => {\r\n      const {id, ...pictureProps} = picture;\r\n      return <PictureItem key={picture.id} onPictureHandler = {onPictureHandler} {...pictureProps}/>\r\n    })\r\n  }\r\n\r\n  return(\r\n    <div className=\"row mb-3\">\r\n      {renderedPictures(pictures)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PictureList;","import PictureSwitch from \"./picture-switch\";\r\n\r\nexport default PictureSwitch;","import React, { Fragment } from \"react\";\r\nimport PictureList from \"../picture-list\"\r\n\r\ntype Props = {\r\n  pictures: IItem[];\r\n  isGroup: boolean;\r\n  onPictureHandler: (tag: string) => void;\r\n}\r\n\r\nconst PictureSwitch:React.FC<Props>  = ({pictures, isGroup, onPictureHandler}) => {\r\n  \r\n  const renderGroup = () => {    \r\n    const tags = Array.from(new Set(pictures.map((picture) => picture.tag)));\r\n\r\n    return (\r\n      tags.map((tag:string) => {\r\n        const tagPictures: IItem[]  = pictures.filter((picture) => picture.tag === tag );\r\n        \r\n        return (\r\n          <Fragment key={tag}>\r\n            <h2>{tag}</h2>\r\n            <PictureList pictures={tagPictures} onPictureHandler={onPictureHandler} />                \r\n          </Fragment>\r\n        )\r\n      })\r\n    )\r\n    \r\n  }\r\n\r\n  if (pictures.length === 0) {\r\n    return (\r\n      <>\r\n        <h2>Здесь будут выводиться результаты поиска.</h2>\r\n        <p>Чтобы их получить, введите тег для поиска и нажмите кнопку загрузить.</p>\r\n      </>\r\n    )\r\n  }\r\n \r\n  if (isGroup) {\r\n    return (\r\n      <>\r\n        {renderGroup()}\r\n      </>\r\n    );\r\n  }\r\n\r\n\r\n  return <PictureList pictures={pictures} onPictureHandler={onPictureHandler} />\r\n}\r\n\r\nexport default PictureSwitch;","import MessageItem from \"./message-item\";\r\n\r\nexport default MessageItem;","import React, { useEffect } from \"react\";\r\nimport './message-item.scss';\r\nimport classNames from \"classnames\";\r\n\r\ntype Props = {\r\n  id: string | number;\r\n  status: 'error' | 'success' | 'warning';\r\n  message: string;\r\n  onMessageDelete: (id: string | number) => void\r\n}\r\n\r\n\r\nconst MessageItem:React.FC<Props> = ({id, status, message, onMessageDelete}) => {\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      onMessageDelete(id);\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [id, onMessageDelete]);\r\n\r\n  const classes:string = classNames(\"toast message-item fade show\", status);\r\n\r\n  const onCLick = () => onMessageDelete(id);\r\n  \r\n  return (\r\n    <div className={classes} role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\r\n      <div className=\"message-item__header toast-header\">\r\n        <strong className=\"me-auto\">{status}</strong>\r\n        <button onClick={onCLick} type=\"button\" className=\"btn-close\" data-bs-dismiss=\"toast\" aria-label=\"Закрыть\"></button>\r\n      </div>\r\n      <div className=\"toast-body\">\r\n        {message}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MessageItem;","import MessageList from \"./message-list\";\r\n\r\nexport default MessageList;","import React from \"react\";\r\nimport MessageItem from \"../message-item\";\r\nimport './message-list.scss';\r\n\r\ntype Props = {\r\n  messages: IMessage[];\r\n  onMessageDelete: (id: string | number) => void\r\n}\r\n\r\nconst MessageList:React.FC<Props> = ({messages, onMessageDelete}) => {\r\n\r\n  const renderedMessages = () => messages.map((message) => {\r\n    return <MessageItem onMessageDelete={onMessageDelete} key={message.id} {...message}/>\r\n  })\r\n\r\n\r\n  return (\r\n    <div className=\"toast-container message-list\">\r\n      {renderedMessages()}      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MessageList;","const tags = [\r\n  'test', 'da', 'sort', 'integral', 'array', 'excellent', 'terror', 'master', 'soul', \r\n]\r\n\r\nexport const getRandomTag = () => {\r\n  const index = Math.floor(Math.random() * tags.length);\r\n  return tags[index];\r\n}","import React, {useEffect, useState, useCallback} from 'react';\r\nimport Header from '../header';\r\nimport GiphyService from '../../service/giphy-service';\r\nimport './app.scss';\r\nimport Container from '../container';\r\nimport PictureSwitch from '../picture-switch';\r\nimport MessageList from '../message-list';\r\nimport { getRandomTag } from '../../utils';\r\n\r\nconst guphyService = new GiphyService();\r\n\r\n\r\nconst  App:React.FC = () => {\r\n\r\n  const [pictures, setPictures] = useState<IItem[]>([]);  \r\n  const [search, setSearch] = useState<string>('');\r\n  const [isGroup, setIsGroup] = useState<boolean>(false);\r\n  const [isLoading, setLoading] = useState<boolean>(false);\r\n  const [messages, setMessages] = useState<IMessage[]>([]);\r\n\r\n  const onSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const idRegExp = /[^a-z, ]/gi;\r\n    setSearch(event.target.value.replace(idRegExp, ''));\r\n  }\r\n\r\n  const onClearHandler = () => {\r\n    setPictures([]);\r\n    setSearch('');\r\n    createMessage('success', `Очищено`);\r\n  }\r\n\r\n  const onGroupHandler = () => {\r\n    setIsGroup(!isGroup);\r\n  }\r\n\r\n  const onPictureHandler = (tag: string) => {\r\n    setSearch(tag);\r\n  }\r\n\r\n  const onMessageDelete = (id:string|number) => {\r\n    const idx = messages.findIndex((message) => message.id === id);\r\n    setMessages(() => [\r\n        ...messages.slice(0, idx),\r\n        ...messages.slice(idx + 1)\r\n    ]);\r\n  }\r\n\r\n  const createMessage = (status:'error' | 'success' | 'warning', message:string) => {\r\n    if (message !== '') {\r\n      const id = new Date().getUTCMilliseconds();\r\n      setMessages((prev) => [...prev, {id, status, message}]);\r\n    }\r\n  }\r\n\r\n  const sendRequest = useCallback((request:string) => {\r\n      setLoading(true);\r\n      const tagArray: string[] =  request.split(',').map(el => el.trim());\r\n      const requests = tagArray.map((str) => guphyService.getRandomPicture(str));\r\n      let pictureItem:IItem = {\r\n        tag: request,\r\n        id: '',\r\n        pictures: []\r\n      };\r\n\r\n      Promise.all(requests).then((result) => {\r\n        result.forEach((tag, index) => {\r\n          if (tag.data.length === 0) {\r\n            createMessage('error', `По тэгу ${tagArray[index]} ничего не найдено`);\r\n          } else {\r\n            const picture:IPicture  = {\r\n              id: tag.data.id,\r\n              tag: tagArray[index],\r\n              url: tag.data.image_url,\r\n              width: tag.data.image_width,\r\n              height: tag.data.image_height,\r\n              alt: tag.data.title,\r\n            };\r\n            pictureItem.id += tag.data.id;\r\n            pictureItem.pictures.push(picture);\r\n          }\r\n        })\r\n        if (pictureItem.pictures.length !==0) {\r\n          setPictures((prev) => [...prev, pictureItem]);\r\n        }\r\n        setLoading(false);\r\n      }).catch((error) => {\r\n        setLoading(false);\r\n        createMessage('error', `Error, http status - ${error.status}`);\r\n      })\r\n    }, []\r\n  )\r\n\r\n  const onSearchHandler = () => {\r\n    if (search === '') {\r\n      createMessage('warning', `Заполните поле - 'тег'`);\r\n      return;\r\n    }\r\n    sendRequest(search)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (search === 'delay') {\r\n      const interval = setInterval(() => {\r\n        const search = getRandomTag();\r\n        sendRequest(search);\r\n      }, 5000);\r\n      return () => clearInterval(interval);\r\n    }\r\n\r\n  }, [search, sendRequest])\r\n\r\n\r\n  return (\r\n    <>\r\n      <Header>\r\n        <div className=\"input-group\">\r\n          <input\r\n            onChange={onSearchChange}\r\n            name=\"tag\"\r\n            value={search}\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Введите тег\"\r\n          />\r\n          <button className=\"btn btn-success\" disabled={isLoading} onClick={onSearchHandler}>\r\n            {isLoading ? 'Загрузка...' : 'Загрузить'}\r\n          </button>\r\n          <button className=\"btn btn-danger\" disabled={pictures.length === 0} onClick={onClearHandler}>Очистить</button>\r\n          <button className=\"btn btn-primary\" onClick={onGroupHandler}>\r\n            {isGroup ? 'Разгруппировать' : 'Группировать'}\r\n          </button>\r\n        </div>\r\n      </Header>\r\n      <Container className=\"py-5\">\r\n        <PictureSwitch pictures={pictures} isGroup={isGroup} onPictureHandler={onPictureHandler}/>\r\n      </Container>\r\n      <MessageList messages={messages} onMessageDelete={onMessageDelete}/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","interface ErrorWithStatus extends Error {\r\n  status?: string | number;\r\n}\r\n\r\nexport default class GiphyService {\r\n  _apiBase = \"https://api.giphy.com/v1/gifs\";\r\n  _apiKey = \"gTJAO48YcpmrADUyo4opy4ES4g7iDBxx\";\r\n\r\n  getResource = async (url:string) => {\r\n    const res = await fetch(`${this._apiBase}${url}`);\r\n\r\n    if (!res.ok) {\r\n      let error = new Error(`Could not fetch ${url}, received ${res.status}`) as ErrorWithStatus;\r\n      error.status = res.status;\r\n      throw error;\r\n    }\r\n    return await res.json();\r\n  };\r\n\r\n  getRandomPicture = async (tag = \"\") => {\r\n    const url = `/random?api_key=${this._apiKey}&tag=${tag}`;\r\n    return await this.getResource(url);\r\n  };\r\n}\r\n","import App from \"./app\";\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}