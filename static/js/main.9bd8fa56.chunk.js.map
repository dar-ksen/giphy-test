{"version":3,"sources":["components/container/index.tsx","components/container/container.tsx","components/header/index.tsx","components/header/header.tsx","components/picture-item/index.tsx","components/picture-item/picture-item.tsx","components/picture-list/index.tsx","components/picture-list/picture-list.tsx","components/picture-switch/index.tsx","components/picture-switch/picture-switch.tsx","components/message-item/index.tsx","components/message-item/message-item.tsx","components/message-list/index.tsx","components/message-list/message-list.tsx","utils/index.tsx","components/app/app.tsx","service/giphy-service.ts","components/app/index.tsx","index.tsx"],"names":["Container","children","className","classes","classNames","Header","PictureItem","pictures","onPictureHandler","map","tag","url","alt","width","height","id","onClick","src","PictureList","currentPictures","picture","pictureProps","PictureSwitch","isGroup","length","Array","from","Set","tagPictures","filter","MessageItem","statys","message","onMessageDelete","useEffect","handler","setTimeout","clearTimeout","role","type","MessageList","messages","tags","guphyService","_apiBase","_apiKey","getResource","a","fetch","res","ok","erorr","Error","status","json","getRandomePicture","App","useState","setPictures","search","setSearch","setIsGroup","isLoaiding","setLoading","setMessages","createMessage","Date","getUTCMilliseconds","prev","sendRequest","useCallback","request","tagArray","split","el","trim","requests","str","pictureItem","Promise","all","then","result","forEach","index","data","image_url","image_width","image_height","title","push","catch","error","interval","setInterval","Math","floor","random","getRandomTag","clearInterval","onChange","event","target","value","replace","name","placeholder","disabled","idx","findIndex","slice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9bd8fa56.chunk.js","sourcesContent":["import Container from \"./container\";\r\n\r\nexport default Container;","import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\ntype Props = {\r\n  className?: string;\r\n}\r\n\r\nconst Container:React.FC<Props> = ({children, className}) => {\r\n\r\n  const classes:string = classNames(\"container\", className);\r\n\r\n  return (\r\n    <div className={classes}> \r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Container;","import Header from \"./header\";\r\n\r\nexport default Header;","import './header.scss';\r\nimport Container from '../container';\r\n\r\nconst Header:React.FC = ({children}) => {\r\n  return (\r\n    <header className=\"p-3 bg-dark text-white\">\r\n      <Container>\r\n        <div className=\"d-flex flex-wrap align-items-center justify-content-center justify-content-lg-start\">\r\n          {children}\r\n        </div>\r\n      </Container>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;","import PictureItem from \"./picture-item\";\r\n\r\nexport default PictureItem;","import React from \"react\";\r\nimport './picture-item.scss';\r\n\r\ntype Props = {\r\n  pictures: IPicture[];\r\n  onPictureHandler: (tag: string) => void;\r\n}\r\n\r\nconst PictureItem:React.FC<Props> = ({pictures, onPictureHandler}) => {\r\n  const renderedPictures = () => {\r\n    return pictures.map(({tag, url, alt, width, height, id}) => {\r\n      return (\r\n        <img key={id} onClick={()=> onPictureHandler(tag)} src={url} alt={alt} width={width} height={height}/>\r\n      )\r\n    })\r\n  }\r\n  return(\r\n    <div className=\"col-sm-3 mb-3\">\r\n      <div className=\"picture-item\">\r\n        {renderedPictures()}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PictureItem;","import PictureList from \"./picture-list\";\r\n\r\nexport default PictureList;","import React from \"react\";\r\nimport PictureItem from \"../picture-item\";\r\n\r\ntype Props = {\r\n  pictures: IItem[];\r\n  onPictureHandler: (tag: string) => void;\r\n}\r\n\r\nconst PictureList:React.FC<Props>  = ({pictures, onPictureHandler}) => {\r\n  \r\n  const renderedPictures = (currentPictures:IItem[]) => {\r\n    return currentPictures.map((picture:IItem) => {\r\n      const {id, ...pictureProps} = picture;\r\n      return <PictureItem key={picture.id} onPictureHandler = {onPictureHandler} {...pictureProps}/>\r\n    })\r\n  }\r\n\r\n  return(\r\n    <div className=\"row mb-3\">\r\n      {renderedPictures(pictures)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PictureList;","import PictureSwitch from \"./picture-switch\";\r\n\r\nexport default PictureSwitch;","import React, { Fragment } from \"react\";\r\nimport PictureList from \"../picture-list\"\r\n\r\ntype Props = {\r\n  pictures: IItem[];\r\n  isGroup: boolean;\r\n  onPictureHandler: (tag: string) => void;\r\n}\r\n\r\nconst PictureSwitch:React.FC<Props>  = ({pictures, isGroup, onPictureHandler}) => {\r\n  \r\n  const renderGroup = () => {    \r\n    const tags = Array.from(new Set(pictures.map((picture) => picture.tag)));\r\n\r\n    return (\r\n      tags.map((tag:string) => {\r\n        const tagPictures: IItem[]  = pictures.filter((picture) => picture.tag === tag );\r\n        \r\n        return (\r\n          <Fragment key={tag}>\r\n            <h2>{tag}</h2>\r\n            <PictureList pictures={tagPictures} onPictureHandler={onPictureHandler} />                \r\n          </Fragment>\r\n        )\r\n      })\r\n    )\r\n    \r\n  }\r\n\r\n  if (pictures.length === 0) {\r\n    return (\r\n      <>\r\n        <h2>Здесь будут выводиться результаты поиска.</h2>\r\n        <p>Чтобы их получить введить тег для поиска и нажмите кнопку загрузить.</p>\r\n      </>\r\n    )\r\n  }\r\n \r\n  if (isGroup) {\r\n    return (\r\n      <>\r\n        {renderGroup()}\r\n      </>\r\n    );\r\n  }\r\n\r\n\r\n  return <PictureList pictures={pictures} onPictureHandler={onPictureHandler} />\r\n}\r\n\r\nexport default PictureSwitch;","import MessageItem from \"./message-item\";\r\n\r\nexport default MessageItem;","import React, { useEffect } from \"react\";\r\nimport './message-item.scss';\r\nimport classNames from \"classnames\";\r\n\r\ntype Props = {\r\n  id: string | number;\r\n  statys: 'error' | 'succses' | 'warning';\r\n  message: string;\r\n  onMessageDelete: (id: string | number) => void\r\n}\r\n\r\n\r\nconst MessageItem:React.FC<Props> = ({id, statys, message, onMessageDelete}) => {\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      onMessageDelete(id);\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [id, onMessageDelete]);\r\n\r\n  const classes:string = classNames(\"toast message-item fade show\", statys);\r\n\r\n  const onCLick = () => onMessageDelete(id);\r\n  \r\n  return (\r\n    <div className={classes} role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\r\n      <div className=\"message-item__header toast-header\">\r\n        <strong className=\"me-auto\">{statys}</strong>\r\n        <button onClick={onCLick} type=\"button\" className=\"btn-close\" data-bs-dismiss=\"toast\" aria-label=\"Закрыть\"></button>\r\n      </div>\r\n      <div className=\"toast-body\">\r\n        {message}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MessageItem;","import MessageList from \"./message-list\";\r\n\r\nexport default MessageList;","import React from \"react\";\r\nimport MessageItem from \"../message-item\";\r\nimport './message-list.scss';\r\n\r\ntype Props = {\r\n  messages: IMessage[];\r\n  onMessageDelete: (id: string | number) => void\r\n}\r\n\r\nconst MessageList:React.FC<Props> = ({messages, onMessageDelete}) => {\r\n\r\n  const renderedMessages = () => messages.map((message) => {\r\n    return <MessageItem onMessageDelete={onMessageDelete} key={message.id} {...message}/>\r\n  })\r\n\r\n\r\n  return (\r\n    <div className=\"toast-container message-list\">\r\n      {renderedMessages()}      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MessageList;","const tags = [\r\n  'test', 'da', 'sort', 'integral', 'arrat', 'exelent', 'terror', 'master', 'sould', \r\n]\r\n\r\nexport const getRandomTag = () => {\r\n  const index = Math.floor(Math.random() * tags.length);\r\n  return tags[index];\r\n}","import React, {useEffect, useState, useCallback} from 'react';\nimport Header from '../header';\nimport GiphyService from '../../service/giphy-service';\nimport './app.scss';\nimport Container from '../container';\nimport PictureSwitch from '../picture-switch';\nimport MessageList from '../message-list';\nimport { getRandomTag } from '../../utils';\n\nconst guphyService = new GiphyService();\n\n\nconst  App:React.FC = () => {\n\n  const [pictures, setPictures] = useState<IItem[]>([]);  \n  const [search, setSearch] = useState<string>('');\n  const [isGroup, setIsGroup] = useState<boolean>(false);\n  const [isLoaiding, setLoading] = useState<boolean>(false);\n  const [messages, setMessages] = useState<IMessage[]>([]);\n\n  const onSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const idRegExp = /[^a-z, ]/gi;\n    setSearch(event.target.value.replace(idRegExp, ''));\n  }\n\n  const onClearHandler = () => {\n    setPictures([]);\n    setSearch('');\n    createMessage('succses', `Очищено`);\n  }\n\n  const onGroupHandler = () => {\n    setIsGroup(!isGroup);\n  }\n\n  const onPictureHandler = (tag: string) => {\n    setSearch(tag);\n  }\n\n  const onMessageDelete = (id:string|number) => {\n    const idx = messages.findIndex((message) => message.id === id);\n    setMessages(() => [\n        ...messages.slice(0, idx),\n        ...messages.slice(idx + 1)\n    ]);\n  }\n\n  const createMessage = (statys:'error' | 'succses' | 'warning', message:string) => {\n    if (message !== '') {\n      const id = new Date().getUTCMilliseconds();\n      setMessages((prev) => [...prev, {id, statys, message}]);\n    }\n  }\n\n  const sendRequest = useCallback((request:string) => {\n      setLoading(true);\n      const tagArray: string[] =  request.split(',').map(el => el.trim());\n      const requests = tagArray.map((str) => guphyService.getRandomePicture(str));\n      let pictureItem:IItem = {\n        tag: request,\n        id: '',\n        pictures: []\n      };\n\n      Promise.all(requests).then((result) => {\n        result.forEach((tag, index) => {\n          if (tag.data.length === 0) {\n            createMessage('error', `По тэгу ${tagArray[index]} ничего не найдено`);\n          } else {\n            const picture:IPicture  = {\n              id: tag.data.id,\n              tag: tagArray[index],\n              url: tag.data.image_url,\n              width: tag.data.image_width,\n              height: tag.data.image_height,\n              alt: tag.data.title,\n            };\n            pictureItem.id += tag.data.id;\n            pictureItem.pictures.push(picture);\n          }\n        })\n        if (pictureItem.pictures.length !==0) {\n          setPictures((prev) => [...prev, pictureItem]);\n        }\n        setLoading(false);\n      }).catch((error) => {\n        setLoading(false);\n        createMessage('error', `Произошла http ошибка статус - ${error.status}`);\n      })\n    }, []\n  )\n\n  const onSearchHandler = () => {\n    if (search === '') {\n      createMessage('warning', `Заполните поле 'тег'`);\n      return;\n    }\n    sendRequest(search)\n  }\n\n  useEffect(() => {\n    if (search === 'delay') {\n      const interval = setInterval(() => {\n        const search = getRandomTag();\n        sendRequest(search);\n      }, 5000);\n      return () => clearInterval(interval);\n    }\n\n  }, [search, sendRequest])\n\n\n  return (\n    <>\n      <Header>\n        <div className=\"input-group\">\n          <input\n            onChange={onSearchChange}\n            name=\"tag\"\n            value={search}\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Введите тег\"\n          />\n          <button className=\"btn btn-success\" disabled={isLoaiding} onClick={onSearchHandler}>\n            {isLoaiding ? 'Загрузка...' : 'Загрузить'}\n          </button>\n          <button className=\"btn btn-danger\" disabled={pictures.length === 0} onClick={onClearHandler}>Очистить</button>\n          <button className=\"btn btn-primary\" onClick={onGroupHandler}>\n            {isGroup ? 'Разгрупировать' : 'Группировать'}\n          </button>\n        </div>\n      </Header>\n      <Container className=\"py-5\">\n        <PictureSwitch pictures={pictures} isGroup={isGroup} onPictureHandler={onPictureHandler}/>\n      </Container>\n      <MessageList messages={messages} onMessageDelete={onMessageDelete}/>\n    </>\n  );\n}\n\nexport default App;\n","interface ErrorWithStatus extends Error {\r\n  status?: string | number;\r\n}\r\n\r\nexport default class GiphyService {\r\n  _apiBase = \"https://api.giphy.com/v1/gifs\";\r\n  _apiKey = \"gTJAO48YcpmrADUyo4opy4ES4g7iDBxx\";\r\n\r\n  getResource = async (url:string) => {\r\n    const res = await fetch(`${this._apiBase}${url}`);\r\n\r\n    if (!res.ok) {\r\n      let erorr = new Error(`Could not fetch ${url}, received ${res.status}`) as ErrorWithStatus;\r\n      erorr.status = res.status;\r\n      throw erorr;\r\n    }\r\n    return await res.json();\r\n  };\r\n\r\n  getRandomePicture = async (tag = \"\") => {\r\n    const url = `/random?api_key=${this._apiKey}&tag=${tag}`;\r\n\r\n    return await this.getResource(url);\r\n  };\r\n}\r\n","import App from \"./app\";\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}